services:
  # --- ANA UYGULAMA SERVİSLERİ ---
  postgres:
    image: 'postgres:latest'
    container_name: anakronik_db
    restart: always
    env_file:
      - production.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - anakronik-net

  backend:
    container_name: anakronik_backend
    build: ./anakronik-be
    restart: always
    depends_on:
      - postgres
    env_file:
      - production.env
    ports:
      - "8080:8080"
    volumes:
      - app_uploads:/app/uploads/images
    networks:
      - anakronik-net

  frontend:
    container_name: anakronik_frontend
    build: ./anakronik-fe
    restart: always
    env_file:
      - production.env
    depends_on:
      - backend
    volumes:
      - frontend_dist:/usr/share/nginx/html # Build çıktısı burada paylaşılacak
    networks:
      - anakronik-net

  nginx:
    image: nginx:alpine
    container_name: anakronik_nginx
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
    volumes:
      - ./anakronik-fe/nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_dist:/usr/share/nginx/html
    networks:
      - anakronik-net

  # --- RAG SERVİSLERİ (YENİ EKLENDİ) ---
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: always
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - anakronik-net # Tüm servisler aynı ağda olmalı

  fastapi:
    container_name: rag_api
    build: ./anakronik-rag
    restart: always
    depends_on:
      - qdrant
    env_file:
      - production.env
    ports:
      - "8000:8000"
    volumes:
      - rag_uploads:/app/uploads
    networks:
      - anakronik-net # Tüm servisler aynı ağda olmalı

volumes:
  postgres_data:
  app_uploads:
  qdrant_storage:
  rag_uploads:
  frontend_dist:

networks:
  anakronik-net:
    driver: bridge